{
  "version": 3,
  "sources": ["../converter.js"],
  "sourcesContent": ["function convertText(quillContents) {\n    let ops = quillContents.ops\n\n    let convertedText = document.getElementById(\"convertedText\")\n    convertedText.innerHTML = \"\" //clear placeholder.\n\n    // blocks in quill are handled by a single newline insert with block properties.\n    // so we need to store a block before writing it since formatting might be at the end\n    let currentBlock = \"\"\n\n    ops.forEach((element, idx) => {\n        let attr = element?.attributes\n        let text = element.insert\n\n        currentBlock += convertQuillOp(text, attr)\n\n        // if this is a newline only with attributes, it's likely a block end\n        if (text == '\\n' || idx == ops.length-1) {\n            // per https://github.com/quilljs/quill/issues/3035\n            // block formatting applies from the block operation back to the last \\n, so only format the current one\n\n            // cannot use destructuring assignemtn due to parcel error.\n            let res = getLastLine(currentBlock)\n            let prev = res[0]\n            let last = res[1]\n\n            // place anything up to the last block since we don't want to format it.\n            convertedText.innerText += prev.length > 0 ? prev + \"\\n\" : \"\" // auto add a line break, unless there's no content in prev\n            currentBlock = last\n\n            // handle block level items before placing. Note that we dont' add justify alignment tags\n            // since it's not understood by FA.\n            if (attr?.align && attr.align != 'justify') currentBlock = `[${attr.align}]${currentBlock.trim()}[/${attr.align}]\\n`\n            if (attr?.header) currentBlock = `[h${attr.header}]${currentBlock.trim()}[/h${attr.header}]\\n`\n            if (attr?.blockquote) currentBlock = `[quote]${currentBlock.trim()}[/quote]\\n`\n\n            // place the block\n            convertedText.innerText += currentBlock\n            currentBlock = ''\n        }\n        \n    });\n\n    // most people will likely want to normalize all linebreaks into paragraph breaks\n    const newlines = /(<br>)+/g\n    convertedText.innerHTML = convertedText.innerHTML.replaceAll(newlines, '\\n<br /><br />')\n}\n\nfunction getLastLine(text) {\n    let idx = text.trimEnd().lastIndexOf(\"\\n\")\n    return [text.substring(0, idx), text.substring(idx).trim()]\n}\n\nfunction convertQuillOp(text, attr) {\n    if (text == '') return ''\n\n    if (attr) {\n        if (attr.italic) {\n            text = \"[i]\" + text + \"[/i]\"\n        }\n        if (attr.bold) {\n            text = \"[b]\" + text + \"[/b]\"\n        }\n\n        if (attr.underline) {\n            text = \"[u]\" + text + \"[/u]\"\n        }\n\n        if (attr.link) {\n            text = `[url=${attr.link}]${text}[/url]`\n        }\n        if (attr.script) {\n            if (attr.script == 'super') text = \"[sup]\" + text + \"[/sup]\"\n            text = \"[sub]\" + text + \"[/sub]\"\n        }\n        if (attr.color) {\n            text = `[color=${attr.color}]${text}[/color]`\n        }\n        else {\n            console.log(\"Didn't identify inline attribute \" + JSON.stringify(attr))\n        }\n    }\n\n    return text\n\n}\n\ndocument.getElementById(\"convertButton\").onclick = (e) => {\n    e.preventDefault()\n    console.log(\"converting text...\")\n    convertText(quill.getContents())\n}\n\ndocument.getElementById(\"copyButton\").onclick = (e) => {\n    e.preventDefault()\n    console.log(\"adding text to clipboard\")\n    let textToCopy = document.getElementById(\"convertedText\").textContent\n    navigator.clipboard.writeText(textToCopy)\n}\n\n\n"],
  "mappings": "MAAA,WAAqB,EAAe,CAChC,GAAI,GAAM,EAAc,IAEpB,EAAgB,SAAS,eAAe,iBAC5C,EAAc,UAAY,GAI1B,GAAI,GAAe,GAEnB,EAAI,QAAQ,CAAC,EAAS,IAAQ,CAC1B,GAAI,GAAO,iBAAS,WAChB,EAAO,EAAQ,OAKnB,GAHA,GAAgB,EAAe,EAAM,GAGjC,GAAQ;AAAA,GAAQ,GAAO,EAAI,OAAO,EAAG,CAKrC,GAAI,GAAM,EAAY,GAClB,EAAO,EAAI,GACX,EAAO,EAAI,GAGf,EAAc,WAAa,EAAK,OAAS,EAAI,EAAO;AAAA,EAAO,GAC3D,EAAe,EAIX,kBAAM,QAAS,EAAK,OAAS,WAAW,GAAe,IAAI,EAAK,SAAS,EAAa,WAAW,EAAK;AAAA,GACtG,kBAAM,SAAQ,GAAe,KAAK,EAAK,UAAU,EAAa,YAAY,EAAK;AAAA,GAC/E,kBAAM,aAAY,GAAe,UAAU,EAAa;AAAA,GAG5D,EAAc,WAAa,EAC3B,EAAe,MAMvB,GAAM,GAAW,WACjB,EAAc,UAAY,EAAc,UAAU,WAAW,EAAU;AAAA,eAG3E,WAAqB,EAAM,CACvB,GAAI,GAAM,EAAK,UAAU,YAAY;AAAA,GACrC,MAAO,CAAC,EAAK,UAAU,EAAG,GAAM,EAAK,UAAU,GAAK,QAGxD,WAAwB,EAAM,EAAM,CAChC,MAAI,IAAQ,GAAW,GAEnB,IACI,GAAK,QACL,GAAO,MAAQ,EAAO,QAEtB,EAAK,MACL,GAAO,MAAQ,EAAO,QAGtB,EAAK,WACL,GAAO,MAAQ,EAAO,QAGtB,EAAK,MACL,GAAO,QAAQ,EAAK,QAAQ,WAE5B,EAAK,QACD,GAAK,QAAU,SAAS,GAAO,QAAU,EAAO,UACpD,EAAO,QAAU,EAAO,UAE5B,AAAI,EAAK,MACL,EAAO,UAAU,EAAK,SAAS,YAG/B,QAAQ,IAAI,oCAAsC,KAAK,UAAU,KAIlE,GAIX,SAAS,eAAe,iBAAiB,QAAU,AAAC,GAAM,CACtD,EAAE,iBACF,QAAQ,IAAI,sBACZ,EAAY,MAAM,gBAGtB,SAAS,eAAe,cAAc,QAAU,AAAC,GAAM,CACnD,EAAE,iBACF,QAAQ,IAAI,4BACZ,GAAI,GAAa,SAAS,eAAe,iBAAiB,YAC1D,UAAU,UAAU,UAAU",
  "names": []
}
